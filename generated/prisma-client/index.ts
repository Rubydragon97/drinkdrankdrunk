// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  drink: (where?: DrinkWhereInput) => Promise<boolean>;
  ingredient: (where?: IngredientWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  drink: (where: DrinkWhereUniqueInput) => DrinkNullablePromise;
  drinks: (args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Drink>;
  drinksConnection: (args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DrinkConnectionPromise;
  ingredient: (where: IngredientWhereUniqueInput) => IngredientNullablePromise;
  ingredients: (args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ingredient>;
  ingredientsConnection: (args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IngredientConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDrink: (data: DrinkCreateInput) => DrinkPromise;
  updateDrink: (args: {
    data: DrinkUpdateInput;
    where: DrinkWhereUniqueInput;
  }) => DrinkPromise;
  updateManyDrinks: (args: {
    data: DrinkUpdateManyMutationInput;
    where?: DrinkWhereInput;
  }) => BatchPayloadPromise;
  upsertDrink: (args: {
    where: DrinkWhereUniqueInput;
    create: DrinkCreateInput;
    update: DrinkUpdateInput;
  }) => DrinkPromise;
  deleteDrink: (where: DrinkWhereUniqueInput) => DrinkPromise;
  deleteManyDrinks: (where?: DrinkWhereInput) => BatchPayloadPromise;
  createIngredient: (data: IngredientCreateInput) => IngredientPromise;
  updateIngredient: (args: {
    data: IngredientUpdateInput;
    where: IngredientWhereUniqueInput;
  }) => IngredientPromise;
  updateManyIngredients: (args: {
    data: IngredientUpdateManyMutationInput;
    where?: IngredientWhereInput;
  }) => BatchPayloadPromise;
  upsertIngredient: (args: {
    where: IngredientWhereUniqueInput;
    create: IngredientCreateInput;
    update: IngredientUpdateInput;
  }) => IngredientPromise;
  deleteIngredient: (where: IngredientWhereUniqueInput) => IngredientPromise;
  deleteManyIngredients: (where?: IngredientWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  drink: (
    where?: DrinkSubscriptionWhereInput
  ) => DrinkSubscriptionPayloadSubscription;
  ingredient: (
    where?: IngredientSubscriptionWhereInput
  ) => IngredientSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type IngredientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "alcoholic_ASC"
  | "alcoholic_DESC";

export type DrinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateManyWithoutFavoritesInput {
  create?: Maybe<
    UserCreateWithoutFavoritesInput[] | UserCreateWithoutFavoritesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFavoritesInput[]
    | UserUpdateWithWhereUniqueWithoutFavoritesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFavoritesInput[]
    | UserUpsertWithWhereUniqueWithoutFavoritesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type DrinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface DrinkUpdateManyWithoutCreatorInput {
  create?: Maybe<
    DrinkCreateWithoutCreatorInput[] | DrinkCreateWithoutCreatorInput
  >;
  delete?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  connect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  set?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  disconnect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  update?: Maybe<
    | DrinkUpdateWithWhereUniqueWithoutCreatorInput[]
    | DrinkUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | DrinkUpsertWithWhereUniqueWithoutCreatorInput[]
    | DrinkUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<DrinkScalarWhereInput[] | DrinkScalarWhereInput>;
  updateMany?: Maybe<
    DrinkUpdateManyWithWhereNestedInput[] | DrinkUpdateManyWithWhereNestedInput
  >;
}

export interface DrinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  ingredients_every?: Maybe<IngredientWhereInput>;
  ingredients_some?: Maybe<IngredientWhereInput>;
  ingredients_none?: Maybe<IngredientWhereInput>;
  favorited_by_every?: Maybe<UserWhereInput>;
  favorited_by_some?: Maybe<UserWhereInput>;
  favorited_by_none?: Maybe<UserWhereInput>;
  creator?: Maybe<UserWhereInput>;
  AND?: Maybe<DrinkWhereInput[] | DrinkWhereInput>;
  OR?: Maybe<DrinkWhereInput[] | DrinkWhereInput>;
  NOT?: Maybe<DrinkWhereInput[] | DrinkWhereInput>;
}

export interface DrinkUpdateWithWhereUniqueWithoutCreatorInput {
  where: DrinkWhereUniqueInput;
  data: DrinkUpdateWithoutCreatorDataInput;
}

export interface IngredientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  alcoholic_not?: Maybe<Boolean>;
  drinks_every?: Maybe<DrinkWhereInput>;
  drinks_some?: Maybe<DrinkWhereInput>;
  drinks_none?: Maybe<DrinkWhereInput>;
  AND?: Maybe<IngredientWhereInput[] | IngredientWhereInput>;
  OR?: Maybe<IngredientWhereInput[] | IngredientWhereInput>;
  NOT?: Maybe<IngredientWhereInput[] | IngredientWhereInput>;
}

export interface IngredientUpdateManyWithoutDrinksInput {
  create?: Maybe<
    IngredientCreateWithoutDrinksInput[] | IngredientCreateWithoutDrinksInput
  >;
  delete?: Maybe<IngredientWhereUniqueInput[] | IngredientWhereUniqueInput>;
  connect?: Maybe<IngredientWhereUniqueInput[] | IngredientWhereUniqueInput>;
  set?: Maybe<IngredientWhereUniqueInput[] | IngredientWhereUniqueInput>;
  disconnect?: Maybe<IngredientWhereUniqueInput[] | IngredientWhereUniqueInput>;
  update?: Maybe<
    | IngredientUpdateWithWhereUniqueWithoutDrinksInput[]
    | IngredientUpdateWithWhereUniqueWithoutDrinksInput
  >;
  upsert?: Maybe<
    | IngredientUpsertWithWhereUniqueWithoutDrinksInput[]
    | IngredientUpsertWithWhereUniqueWithoutDrinksInput
  >;
  deleteMany?: Maybe<IngredientScalarWhereInput[] | IngredientScalarWhereInput>;
  updateMany?: Maybe<
    | IngredientUpdateManyWithWhereNestedInput[]
    | IngredientUpdateManyWithWhereNestedInput
  >;
}

export interface DrinkUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  name?: Maybe<String>;
}

export interface IngredientUpdateWithWhereUniqueWithoutDrinksInput {
  where: IngredientWhereUniqueInput;
  data: IngredientUpdateWithoutDrinksDataInput;
}

export interface DrinkUpdateWithoutCreatorDataInput {
  published?: Maybe<Boolean>;
  name?: Maybe<String>;
  ingredients?: Maybe<IngredientUpdateManyWithoutDrinksInput>;
  favorited_by?: Maybe<UserUpdateManyWithoutFavoritesInput>;
}

export interface IngredientUpdateWithoutDrinksDataInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
}

export interface IngredientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IngredientWhereInput>;
  AND?: Maybe<
    IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  >;
  OR?: Maybe<
    IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IngredientSubscriptionWhereInput[] | IngredientSubscriptionWhereInput
  >;
}

export interface IngredientUpsertWithWhereUniqueWithoutDrinksInput {
  where: IngredientWhereUniqueInput;
  update: IngredientUpdateWithoutDrinksDataInput;
  create: IngredientCreateWithoutDrinksInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface IngredientScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  alcoholic_not?: Maybe<Boolean>;
  AND?: Maybe<IngredientScalarWhereInput[] | IngredientScalarWhereInput>;
  OR?: Maybe<IngredientScalarWhereInput[] | IngredientScalarWhereInput>;
  NOT?: Maybe<IngredientScalarWhereInput[] | IngredientScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
  favorites?: Maybe<DrinkCreateManyWithoutFavorited_byInput>;
  creations?: Maybe<DrinkCreateManyWithoutCreatorInput>;
}

export interface IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput;
  data: IngredientUpdateManyDataInput;
}

export interface IngredientUpdateManyMutationInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
}

export interface IngredientUpdateManyDataInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
}

export interface DrinkUpdateWithoutIngredientsDataInput {
  published?: Maybe<Boolean>;
  name?: Maybe<String>;
  favorited_by?: Maybe<UserUpdateManyWithoutFavoritesInput>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreationsInput>;
}

export interface DrinkCreateWithoutIngredientsInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name: String;
  favorited_by?: Maybe<UserCreateManyWithoutFavoritesInput>;
  creator: UserCreateOneWithoutCreationsInput;
}

export interface DrinkUpdateWithWhereUniqueWithoutIngredientsInput {
  where: DrinkWhereUniqueInput;
  data: DrinkUpdateWithoutIngredientsDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutFavoritesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFavoritesDataInput;
}

export interface IngredientUpdateInput {
  name?: Maybe<String>;
  alcoholic?: Maybe<Boolean>;
  drinks?: Maybe<DrinkUpdateManyWithoutIngredientsInput>;
}

export interface UserUpdateWithoutFavoritesDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  creations?: Maybe<DrinkUpdateManyWithoutCreatorInput>;
}

export interface DrinkCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name: String;
  ingredients?: Maybe<IngredientCreateManyWithoutDrinksInput>;
  favorited_by?: Maybe<UserCreateManyWithoutFavoritesInput>;
  creator: UserCreateOneWithoutCreationsInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  favorites_every?: Maybe<DrinkWhereInput>;
  favorites_some?: Maybe<DrinkWhereInput>;
  favorites_none?: Maybe<DrinkWhereInput>;
  creations_every?: Maybe<DrinkWhereInput>;
  creations_some?: Maybe<DrinkWhereInput>;
  creations_none?: Maybe<DrinkWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface IngredientCreateWithoutDrinksInput {
  id?: Maybe<ID_Input>;
  name: String;
  alcoholic?: Maybe<Boolean>;
}

export interface DrinkCreateManyWithoutIngredientsInput {
  create?: Maybe<
    DrinkCreateWithoutIngredientsInput[] | DrinkCreateWithoutIngredientsInput
  >;
  connect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
}

export interface UserCreateWithoutFavoritesInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
  creations?: Maybe<DrinkCreateManyWithoutCreatorInput>;
}

export interface IngredientCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  alcoholic?: Maybe<Boolean>;
  drinks?: Maybe<DrinkCreateManyWithoutIngredientsInput>;
}

export interface DrinkCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name: String;
  ingredients?: Maybe<IngredientCreateManyWithoutDrinksInput>;
  favorited_by?: Maybe<UserCreateManyWithoutFavoritesInput>;
}

export interface DrinkUpsertWithWhereUniqueWithoutCreatorInput {
  where: DrinkWhereUniqueInput;
  update: DrinkUpdateWithoutCreatorDataInput;
  create: DrinkCreateWithoutCreatorInput;
}

export interface UserCreateWithoutCreationsInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
  favorites?: Maybe<DrinkCreateManyWithoutFavorited_byInput>;
}

export interface DrinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<DrinkScalarWhereInput[] | DrinkScalarWhereInput>;
  OR?: Maybe<DrinkScalarWhereInput[] | DrinkScalarWhereInput>;
  NOT?: Maybe<DrinkScalarWhereInput[] | DrinkScalarWhereInput>;
}

export interface DrinkCreateWithoutFavorited_byInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name: String;
  ingredients?: Maybe<IngredientCreateManyWithoutDrinksInput>;
  creator: UserCreateOneWithoutCreationsInput;
}

export interface DrinkUpdateManyWithWhereNestedInput {
  where: DrinkScalarWhereInput;
  data: DrinkUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface DrinkUpdateManyDataInput {
  published?: Maybe<Boolean>;
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  favorites?: Maybe<DrinkUpdateManyWithoutFavorited_byInput>;
  creations?: Maybe<DrinkUpdateManyWithoutCreatorInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFavoritesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFavoritesDataInput;
  create: UserCreateWithoutFavoritesInput;
}

export interface DrinkUpsertWithWhereUniqueWithoutIngredientsInput {
  where: DrinkWhereUniqueInput;
  update: DrinkUpdateWithoutIngredientsDataInput;
  create: DrinkCreateWithoutIngredientsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface DrinkUpdateManyWithoutIngredientsInput {
  create?: Maybe<
    DrinkCreateWithoutIngredientsInput[] | DrinkCreateWithoutIngredientsInput
  >;
  delete?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  connect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  set?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  disconnect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  update?: Maybe<
    | DrinkUpdateWithWhereUniqueWithoutIngredientsInput[]
    | DrinkUpdateWithWhereUniqueWithoutIngredientsInput
  >;
  upsert?: Maybe<
    | DrinkUpsertWithWhereUniqueWithoutIngredientsInput[]
    | DrinkUpsertWithWhereUniqueWithoutIngredientsInput
  >;
  deleteMany?: Maybe<DrinkScalarWhereInput[] | DrinkScalarWhereInput>;
  updateMany?: Maybe<
    DrinkUpdateManyWithWhereNestedInput[] | DrinkUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface IngredientCreateManyWithoutDrinksInput {
  create?: Maybe<
    IngredientCreateWithoutDrinksInput[] | IngredientCreateWithoutDrinksInput
  >;
  connect?: Maybe<IngredientWhereUniqueInput[] | IngredientWhereUniqueInput>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface DrinkCreateManyWithoutCreatorInput {
  create?: Maybe<
    DrinkCreateWithoutCreatorInput[] | DrinkCreateWithoutCreatorInput
  >;
  connect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutCreationsInput {
  create?: Maybe<UserCreateWithoutCreationsInput>;
  update?: Maybe<UserUpdateWithoutCreationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DrinkCreateManyWithoutFavorited_byInput {
  create?: Maybe<
    DrinkCreateWithoutFavorited_byInput[] | DrinkCreateWithoutFavorited_byInput
  >;
  connect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
}

export interface UserUpdateWithoutCreationsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  favorites?: Maybe<DrinkUpdateManyWithoutFavorited_byInput>;
}

export interface DrinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DrinkWhereInput>;
  AND?: Maybe<DrinkSubscriptionWhereInput[] | DrinkSubscriptionWhereInput>;
  OR?: Maybe<DrinkSubscriptionWhereInput[] | DrinkSubscriptionWhereInput>;
  NOT?: Maybe<DrinkSubscriptionWhereInput[] | DrinkSubscriptionWhereInput>;
}

export interface DrinkUpdateManyWithoutFavorited_byInput {
  create?: Maybe<
    DrinkCreateWithoutFavorited_byInput[] | DrinkCreateWithoutFavorited_byInput
  >;
  delete?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  connect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  set?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  disconnect?: Maybe<DrinkWhereUniqueInput[] | DrinkWhereUniqueInput>;
  update?: Maybe<
    | DrinkUpdateWithWhereUniqueWithoutFavorited_byInput[]
    | DrinkUpdateWithWhereUniqueWithoutFavorited_byInput
  >;
  upsert?: Maybe<
    | DrinkUpsertWithWhereUniqueWithoutFavorited_byInput[]
    | DrinkUpsertWithWhereUniqueWithoutFavorited_byInput
  >;
  deleteMany?: Maybe<DrinkScalarWhereInput[] | DrinkScalarWhereInput>;
  updateMany?: Maybe<
    DrinkUpdateManyWithWhereNestedInput[] | DrinkUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserCreateManyWithoutFavoritesInput {
  create?: Maybe<
    UserCreateWithoutFavoritesInput[] | UserCreateWithoutFavoritesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserUpsertWithoutCreationsInput {
  update: UserUpdateWithoutCreationsDataInput;
  create: UserCreateWithoutCreationsInput;
}

export interface DrinkUpsertWithWhereUniqueWithoutFavorited_byInput {
  where: DrinkWhereUniqueInput;
  update: DrinkUpdateWithoutFavorited_byDataInput;
  create: DrinkCreateWithoutFavorited_byInput;
}

export interface DrinkUpdateWithoutFavorited_byDataInput {
  published?: Maybe<Boolean>;
  name?: Maybe<String>;
  ingredients?: Maybe<IngredientUpdateManyWithoutDrinksInput>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreationsInput>;
}

export interface DrinkUpdateWithWhereUniqueWithoutFavorited_byInput {
  where: DrinkWhereUniqueInput;
  data: DrinkUpdateWithoutFavorited_byDataInput;
}

export interface UserCreateOneWithoutCreationsInput {
  create?: Maybe<UserCreateWithoutCreationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type IngredientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface DrinkUpdateInput {
  published?: Maybe<Boolean>;
  name?: Maybe<String>;
  ingredients?: Maybe<IngredientUpdateManyWithoutDrinksInput>;
  favorited_by?: Maybe<UserUpdateManyWithoutFavoritesInput>;
  creator?: Maybe<UserUpdateOneRequiredWithoutCreationsInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DrinkEdge {
  node: Drink;
  cursor: String;
}

export interface DrinkEdgePromise extends Promise<DrinkEdge>, Fragmentable {
  node: <T = DrinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DrinkEdgeSubscription
  extends Promise<AsyncIterator<DrinkEdge>>,
    Fragmentable {
  node: <T = DrinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Ingredient {
  id: ID_Output;
  name: String;
  alcoholic: Boolean;
}

export interface IngredientPromise extends Promise<Ingredient>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  alcoholic: () => Promise<Boolean>;
  drinks: <T = FragmentableArray<Drink>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IngredientSubscription
  extends Promise<AsyncIterator<Ingredient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  alcoholic: () => Promise<AsyncIterator<Boolean>>;
  drinks: <T = Promise<AsyncIterator<DrinkSubscription>>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IngredientNullablePromise
  extends Promise<Ingredient | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  alcoholic: () => Promise<Boolean>;
  drinks: <T = FragmentableArray<Drink>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface IngredientSubscriptionPayload {
  mutation: MutationType;
  node: Ingredient;
  updatedFields: String[];
  previousValues: IngredientPreviousValues;
}

export interface IngredientSubscriptionPayloadPromise
  extends Promise<IngredientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IngredientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IngredientPreviousValuesPromise>() => T;
}

export interface IngredientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IngredientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IngredientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IngredientPreviousValuesSubscription>() => T;
}

export interface Drink {
  id: ID_Output;
  published: Boolean;
  name: String;
}

export interface DrinkPromise extends Promise<Drink>, Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
  ingredients: <T = FragmentableArray<Ingredient>>(args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorited_by: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserPromise>() => T;
}

export interface DrinkSubscription
  extends Promise<AsyncIterator<Drink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
  ingredients: <T = Promise<AsyncIterator<IngredientSubscription>>>(args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorited_by: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserSubscription>() => T;
}

export interface DrinkNullablePromise
  extends Promise<Drink | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
  ingredients: <T = FragmentableArray<Ingredient>>(args?: {
    where?: IngredientWhereInput;
    orderBy?: IngredientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorited_by: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creator: <T = UserPromise>() => T;
}

export interface DrinkConnection {
  pageInfo: PageInfo;
  edges: DrinkEdge[];
}

export interface DrinkConnectionPromise
  extends Promise<DrinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DrinkEdge>>() => T;
  aggregate: <T = AggregateDrinkPromise>() => T;
}

export interface DrinkConnectionSubscription
  extends Promise<AsyncIterator<DrinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DrinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDrinkSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface IngredientEdge {
  node: Ingredient;
  cursor: String;
}

export interface IngredientEdgePromise
  extends Promise<IngredientEdge>,
    Fragmentable {
  node: <T = IngredientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IngredientEdgeSubscription
  extends Promise<AsyncIterator<IngredientEdge>>,
    Fragmentable {
  node: <T = IngredientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  favorites: <T = FragmentableArray<Drink>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creations: <T = FragmentableArray<Drink>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  favorites: <T = Promise<AsyncIterator<DrinkSubscription>>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creations: <T = Promise<AsyncIterator<DrinkSubscription>>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  favorites: <T = FragmentableArray<Drink>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creations: <T = FragmentableArray<Drink>>(args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DrinkPreviousValues {
  id: ID_Output;
  published: Boolean;
  name: String;
}

export interface DrinkPreviousValuesPromise
  extends Promise<DrinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  name: () => Promise<String>;
}

export interface DrinkPreviousValuesSubscription
  extends Promise<AsyncIterator<DrinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DrinkSubscriptionPayload {
  mutation: MutationType;
  node: Drink;
  updatedFields: String[];
  previousValues: DrinkPreviousValues;
}

export interface DrinkSubscriptionPayloadPromise
  extends Promise<DrinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DrinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DrinkPreviousValuesPromise>() => T;
}

export interface DrinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DrinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DrinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DrinkPreviousValuesSubscription>() => T;
}

export interface IngredientPreviousValues {
  id: ID_Output;
  name: String;
  alcoholic: Boolean;
}

export interface IngredientPreviousValuesPromise
  extends Promise<IngredientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  alcoholic: () => Promise<Boolean>;
}

export interface IngredientPreviousValuesSubscription
  extends Promise<AsyncIterator<IngredientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  alcoholic: () => Promise<AsyncIterator<Boolean>>;
}

export interface IngredientConnection {
  pageInfo: PageInfo;
  edges: IngredientEdge[];
}

export interface IngredientConnectionPromise
  extends Promise<IngredientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IngredientEdge>>() => T;
  aggregate: <T = AggregateIngredientPromise>() => T;
}

export interface IngredientConnectionSubscription
  extends Promise<AsyncIterator<IngredientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IngredientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIngredientSubscription>() => T;
}

export interface AggregateIngredient {
  count: Int;
}

export interface AggregateIngredientPromise
  extends Promise<AggregateIngredient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIngredientSubscription
  extends Promise<AsyncIterator<AggregateIngredient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDrink {
  count: Int;
}

export interface AggregateDrinkPromise
  extends Promise<AggregateDrink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDrinkSubscription
  extends Promise<AsyncIterator<AggregateDrink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Ingredient",
    embedded: false
  },
  {
    name: "Drink",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();

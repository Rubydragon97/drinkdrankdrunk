### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Drink {
  creator: User!
  favorited_by(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  id: ID!
  ingredients(after: String, before: String, first: Int, last: Int, orderBy: IngredientOrderByInput, skip: Int, where: IngredientWhereInput): [Ingredient!]
  name: String!
  published: Boolean!
}

input DrinkCreateInput {
  creator: UserCreateOneWithoutCreationsInput!
  favorited_by: UserCreateManyWithoutFavoritesInput
  id: ID
  ingredients: IngredientCreateManyWithoutDrinksInput
  name: String!
  published: Boolean
}

input DrinkCreateManyWithoutCreatorInput {
  connect: [DrinkWhereUniqueInput!]
  create: [DrinkCreateWithoutCreatorInput!]
}

input DrinkCreateManyWithoutFavorited_byInput {
  connect: [DrinkWhereUniqueInput!]
  create: [DrinkCreateWithoutFavorited_byInput!]
}

input DrinkCreateWithoutCreatorInput {
  favorited_by: UserCreateManyWithoutFavoritesInput
  id: ID
  ingredients: IngredientCreateManyWithoutDrinksInput
  name: String!
  published: Boolean
}

input DrinkCreateWithoutFavorited_byInput {
  creator: UserCreateOneWithoutCreationsInput!
  id: ID
  ingredients: IngredientCreateManyWithoutDrinksInput
  name: String!
  published: Boolean
}

enum DrinkOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  published_ASC
  published_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DrinkWhereInput {
  AND: [DrinkWhereInput!]
  creator: UserWhereInput
  favorited_by_every: UserWhereInput
  favorited_by_none: UserWhereInput
  favorited_by_some: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  ingredients_every: IngredientWhereInput
  ingredients_none: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [DrinkWhereInput!]
  OR: [DrinkWhereInput!]
  published: Boolean
  published_not: Boolean
}

input DrinkWhereUniqueInput {
  id: ID
  name: String
}

type Ingredient {
  alcoholic: Boolean!
  drinks(after: String, before: String, first: Int, last: Int, orderBy: DrinkOrderByInput, skip: Int, where: DrinkWhereInput): [Drink!]
  id: ID!
  name: String!
}

input IngredientCreateManyWithoutDrinksInput {
  connect: [IngredientWhereUniqueInput!]
  create: [IngredientCreateWithoutDrinksInput!]
}

input IngredientCreateWithoutDrinksInput {
  alcoholic: Boolean
  id: ID
  name: String!
}

enum IngredientOrderByInput {
  alcoholic_ASC
  alcoholic_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input IngredientWhereInput {
  alcoholic: Boolean
  alcoholic_not: Boolean
  AND: [IngredientWhereInput!]
  drinks_every: DrinkWhereInput
  drinks_none: DrinkWhereInput
  drinks_some: DrinkWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
}

input IngredientWhereUniqueInput {
  id: ID
  name: String
}

type Mutation {
  createDrink(data: DrinkCreateInput!): Drink!
  createDrinkDraft(creatorId: ID!, name: String): Drink!
  createUser(data: UserCreateInput!): User!
  publish(id: ID): Drink
}

type Query {
  drink(where: DrinkWhereUniqueInput!): Drink
  drinksByUser(email: String): [Drink!]!
  feed: [Drink!]!
}

type Subscription {
  drinks: Drink!
}

type User {
  creations(after: String, before: String, first: Int, last: Int, orderBy: DrinkOrderByInput, skip: Int, where: DrinkWhereInput): [Drink!]
  email: String
  favorites(after: String, before: String, first: Int, last: Int, orderBy: DrinkOrderByInput, skip: Int, where: DrinkWhereInput): [Drink!]
  id: ID!
  name: String!
}

input UserCreateInput {
  creations: DrinkCreateManyWithoutCreatorInput
  email: String
  favorites: DrinkCreateManyWithoutFavorited_byInput
  id: ID
  name: String!
}

input UserCreateManyWithoutFavoritesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFavoritesInput!]
}

input UserCreateOneWithoutCreationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCreationsInput
}

input UserCreateWithoutCreationsInput {
  email: String
  favorites: DrinkCreateManyWithoutFavorited_byInput
  id: ID
  name: String!
}

input UserCreateWithoutFavoritesInput {
  creations: DrinkCreateManyWithoutCreatorInput
  email: String
  id: ID
  name: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  creations_every: DrinkWhereInput
  creations_none: DrinkWhereInput
  creations_some: DrinkWhereInput
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  favorites_every: DrinkWhereInput
  favorites_none: DrinkWhereInput
  favorites_some: DrinkWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}

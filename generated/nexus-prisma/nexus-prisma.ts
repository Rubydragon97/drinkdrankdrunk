/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Drink: DrinkObject
      Ingredient: IngredientObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      IngredientConnection: IngredientConnectionObject
      IngredientEdge: IngredientEdgeObject
      AggregateIngredient: AggregateIngredientObject
      DrinkConnection: DrinkConnectionObject
      DrinkEdge: DrinkEdgeObject
      AggregateDrink: AggregateDrinkObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      IngredientSubscriptionPayload: IngredientSubscriptionPayloadObject
      IngredientPreviousValues: IngredientPreviousValuesObject
      DrinkSubscriptionPayload: DrinkSubscriptionPayloadObject
      DrinkPreviousValues: DrinkPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Drink: DrinkFieldDetails
      Ingredient: IngredientFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      IngredientConnection: IngredientConnectionFieldDetails
      IngredientEdge: IngredientEdgeFieldDetails
      AggregateIngredient: AggregateIngredientFieldDetails
      DrinkConnection: DrinkConnectionFieldDetails
      DrinkEdge: DrinkEdgeFieldDetails
      AggregateDrink: AggregateDrinkFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      IngredientSubscriptionPayload: IngredientSubscriptionPayloadFieldDetails
      IngredientPreviousValues: IngredientPreviousValuesFieldDetails
      DrinkSubscriptionPayload: DrinkSubscriptionPayloadFieldDetails
      DrinkPreviousValues: DrinkPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      DrinkWhereInput: DrinkWhereInputInputObject
      IngredientWhereInput: IngredientWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      IngredientWhereUniqueInput: IngredientWhereUniqueInputInputObject
      DrinkWhereUniqueInput: DrinkWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      DrinkCreateManyWithoutFavorited_byInput: DrinkCreateManyWithoutFavorited_byInputInputObject
      DrinkCreateWithoutFavorited_byInput: DrinkCreateWithoutFavorited_byInputInputObject
      IngredientCreateManyWithoutDrinksInput: IngredientCreateManyWithoutDrinksInputInputObject
      IngredientCreateWithoutDrinksInput: IngredientCreateWithoutDrinksInputInputObject
      UserCreateOneWithoutCreationsInput: UserCreateOneWithoutCreationsInputInputObject
      UserCreateWithoutCreationsInput: UserCreateWithoutCreationsInputInputObject
      DrinkCreateManyWithoutCreatorInput: DrinkCreateManyWithoutCreatorInputInputObject
      DrinkCreateWithoutCreatorInput: DrinkCreateWithoutCreatorInputInputObject
      UserCreateManyWithoutFavoritesInput: UserCreateManyWithoutFavoritesInputInputObject
      UserCreateWithoutFavoritesInput: UserCreateWithoutFavoritesInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      DrinkUpdateManyWithoutFavorited_byInput: DrinkUpdateManyWithoutFavorited_byInputInputObject
      DrinkUpdateWithWhereUniqueWithoutFavorited_byInput: DrinkUpdateWithWhereUniqueWithoutFavorited_byInputInputObject
      DrinkUpdateWithoutFavorited_byDataInput: DrinkUpdateWithoutFavorited_byDataInputInputObject
      IngredientUpdateManyWithoutDrinksInput: IngredientUpdateManyWithoutDrinksInputInputObject
      IngredientUpdateWithWhereUniqueWithoutDrinksInput: IngredientUpdateWithWhereUniqueWithoutDrinksInputInputObject
      IngredientUpdateWithoutDrinksDataInput: IngredientUpdateWithoutDrinksDataInputInputObject
      IngredientUpsertWithWhereUniqueWithoutDrinksInput: IngredientUpsertWithWhereUniqueWithoutDrinksInputInputObject
      IngredientScalarWhereInput: IngredientScalarWhereInputInputObject
      IngredientUpdateManyWithWhereNestedInput: IngredientUpdateManyWithWhereNestedInputInputObject
      IngredientUpdateManyDataInput: IngredientUpdateManyDataInputInputObject
      UserUpdateOneRequiredWithoutCreationsInput: UserUpdateOneRequiredWithoutCreationsInputInputObject
      UserUpdateWithoutCreationsDataInput: UserUpdateWithoutCreationsDataInputInputObject
      UserUpsertWithoutCreationsInput: UserUpsertWithoutCreationsInputInputObject
      DrinkUpsertWithWhereUniqueWithoutFavorited_byInput: DrinkUpsertWithWhereUniqueWithoutFavorited_byInputInputObject
      DrinkScalarWhereInput: DrinkScalarWhereInputInputObject
      DrinkUpdateManyWithWhereNestedInput: DrinkUpdateManyWithWhereNestedInputInputObject
      DrinkUpdateManyDataInput: DrinkUpdateManyDataInputInputObject
      DrinkUpdateManyWithoutCreatorInput: DrinkUpdateManyWithoutCreatorInputInputObject
      DrinkUpdateWithWhereUniqueWithoutCreatorInput: DrinkUpdateWithWhereUniqueWithoutCreatorInputInputObject
      DrinkUpdateWithoutCreatorDataInput: DrinkUpdateWithoutCreatorDataInputInputObject
      UserUpdateManyWithoutFavoritesInput: UserUpdateManyWithoutFavoritesInputInputObject
      UserUpdateWithWhereUniqueWithoutFavoritesInput: UserUpdateWithWhereUniqueWithoutFavoritesInputInputObject
      UserUpdateWithoutFavoritesDataInput: UserUpdateWithoutFavoritesDataInputInputObject
      UserUpsertWithWhereUniqueWithoutFavoritesInput: UserUpsertWithWhereUniqueWithoutFavoritesInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      DrinkUpsertWithWhereUniqueWithoutCreatorInput: DrinkUpsertWithWhereUniqueWithoutCreatorInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      IngredientCreateInput: IngredientCreateInputInputObject
      DrinkCreateManyWithoutIngredientsInput: DrinkCreateManyWithoutIngredientsInputInputObject
      DrinkCreateWithoutIngredientsInput: DrinkCreateWithoutIngredientsInputInputObject
      IngredientUpdateInput: IngredientUpdateInputInputObject
      DrinkUpdateManyWithoutIngredientsInput: DrinkUpdateManyWithoutIngredientsInputInputObject
      DrinkUpdateWithWhereUniqueWithoutIngredientsInput: DrinkUpdateWithWhereUniqueWithoutIngredientsInputInputObject
      DrinkUpdateWithoutIngredientsDataInput: DrinkUpdateWithoutIngredientsDataInputInputObject
      DrinkUpsertWithWhereUniqueWithoutIngredientsInput: DrinkUpsertWithWhereUniqueWithoutIngredientsInputInputObject
      IngredientUpdateManyMutationInput: IngredientUpdateManyMutationInputInputObject
      DrinkCreateInput: DrinkCreateInputInputObject
      DrinkUpdateInput: DrinkUpdateInputInputObject
      DrinkUpdateManyMutationInput: DrinkUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      IngredientSubscriptionWhereInput: IngredientSubscriptionWhereInputInputObject
      DrinkSubscriptionWhereInput: DrinkSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    DrinkOrderByInput: DrinkOrderByInputValues,
    IngredientOrderByInput: IngredientOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'ingredient', args?: QueryIngredientArgs[] | false, alias?: string  } 
  | { name: 'ingredients', args?: QueryIngredientsArgs[] | false, alias?: string  } 
  | { name: 'ingredientsConnection', args?: QueryIngredientsConnectionArgs[] | false, alias?: string  } 
  | { name: 'drink', args?: QueryDrinkArgs[] | false, alias?: string  } 
  | { name: 'drinks', args?: QueryDrinksArgs[] | false, alias?: string  } 
  | { name: 'drinksConnection', args?: QueryDrinksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'ingredient'
  | 'ingredients'
  | 'ingredientsConnection'
  | 'drink'
  | 'drinks'
  | 'drinksConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryIngredientArgs =
  | 'where'
type QueryIngredientsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryIngredientsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDrinkArgs =
  | 'where'
type QueryDrinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDrinksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  ingredient: {
    type: 'Ingredient'
    args: Record<QueryIngredientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: IngredientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient | null> | prisma.Ingredient | null
  }
  ingredients: {
    type: 'Ingredient'
    args: Record<QueryIngredientsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: IngredientWhereInput | null, orderBy?: prisma.IngredientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient[]> | prisma.Ingredient[]
  }
  ingredientsConnection: {
    type: 'IngredientConnection'
    args: Record<QueryIngredientsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: IngredientWhereInput | null, orderBy?: prisma.IngredientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IngredientConnection> | prisma.IngredientConnection
  }
  drink: {
    type: 'Drink'
    args: Record<QueryDrinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DrinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink | null> | prisma.Drink | null
  }
  drinks: {
    type: 'Drink'
    args: Record<QueryDrinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DrinkWhereInput | null, orderBy?: prisma.DrinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink[]> | prisma.Drink[]
  }
  drinksConnection: {
    type: 'DrinkConnection'
    args: Record<QueryDrinksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DrinkWhereInput | null, orderBy?: prisma.DrinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DrinkConnection> | prisma.DrinkConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'favorites', args?: UserFavoritesArgs[] | false, alias?: string  } 
  | { name: 'creations', args?: UserCreationsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'name'
  | 'favorites'
  | 'creations'


type UserFavoritesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserCreationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  favorites: {
    type: 'Drink'
    args: Record<UserFavoritesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: DrinkWhereInput | null, orderBy?: prisma.DrinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink[]> | prisma.Drink[]
  }
  creations: {
    type: 'Drink'
    args: Record<UserCreationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: DrinkWhereInput | null, orderBy?: prisma.DrinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink[]> | prisma.Drink[]
  }
}
  

// Types for Drink

type DrinkObject =
  | DrinkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'ingredients', args?: DrinkIngredientsArgs[] | false, alias?: string  } 
  | { name: 'favorited_by', args?: DrinkFavorited_byArgs[] | false, alias?: string  } 
  | { name: 'creator', args?: [] | false, alias?: string  } 

type DrinkFields =
  | 'id'
  | 'published'
  | 'name'
  | 'ingredients'
  | 'favorited_by'
  | 'creator'


type DrinkIngredientsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type DrinkFavorited_byArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface DrinkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ingredients: {
    type: 'Ingredient'
    args: Record<DrinkIngredientsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Drink">,
      args: { where?: IngredientWhereInput | null, orderBy?: prisma.IngredientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient[]> | prisma.Ingredient[]
  }
  favorited_by: {
    type: 'User'
    args: Record<DrinkFavorited_byArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Drink">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  creator: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Drink">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for Ingredient

type IngredientObject =
  | IngredientFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'alcoholic', args?: [] | false, alias?: string  } 
  | { name: 'drinks', args?: IngredientDrinksArgs[] | false, alias?: string  } 

type IngredientFields =
  | 'id'
  | 'name'
  | 'alcoholic'
  | 'drinks'


type IngredientDrinksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface IngredientFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  alcoholic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  drinks: {
    type: 'Drink'
    args: Record<IngredientDrinksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Ingredient">,
      args: { where?: DrinkWhereInput | null, orderBy?: prisma.DrinkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink[]> | prisma.Drink[]
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for IngredientConnection

type IngredientConnectionObject =
  | IngredientConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type IngredientConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface IngredientConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IngredientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'IngredientEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"IngredientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IngredientEdge[]> | prisma.IngredientEdge[]
  }
  aggregate: {
    type: 'AggregateIngredient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IngredientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateIngredient> | prisma.AggregateIngredient
  }
}
  

// Types for IngredientEdge

type IngredientEdgeObject =
  | IngredientEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type IngredientEdgeFields =
  | 'node'
  | 'cursor'



  

export interface IngredientEdgeFieldDetails {
  node: {
    type: 'Ingredient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IngredientEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient> | prisma.Ingredient
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateIngredient

type AggregateIngredientObject =
  | AggregateIngredientFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateIngredientFields =
  | 'count'



  

export interface AggregateIngredientFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DrinkConnection

type DrinkConnectionObject =
  | DrinkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DrinkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DrinkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DrinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DrinkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DrinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DrinkEdge[]> | prisma.DrinkEdge[]
  }
  aggregate: {
    type: 'AggregateDrink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DrinkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDrink> | prisma.AggregateDrink
  }
}
  

// Types for DrinkEdge

type DrinkEdgeObject =
  | DrinkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DrinkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DrinkEdgeFieldDetails {
  node: {
    type: 'Drink'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DrinkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink> | prisma.Drink
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDrink

type AggregateDrinkObject =
  | AggregateDrinkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDrinkFields =
  | 'count'



  

export interface AggregateDrinkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createIngredient', args?: MutationCreateIngredientArgs[] | false, alias?: string  } 
  | { name: 'updateIngredient', args?: MutationUpdateIngredientArgs[] | false, alias?: string  } 
  | { name: 'updateManyIngredients', args?: MutationUpdateManyIngredientsArgs[] | false, alias?: string  } 
  | { name: 'upsertIngredient', args?: MutationUpsertIngredientArgs[] | false, alias?: string  } 
  | { name: 'deleteIngredient', args?: MutationDeleteIngredientArgs[] | false, alias?: string  } 
  | { name: 'deleteManyIngredients', args?: MutationDeleteManyIngredientsArgs[] | false, alias?: string  } 
  | { name: 'createDrink', args?: MutationCreateDrinkArgs[] | false, alias?: string  } 
  | { name: 'updateDrink', args?: MutationUpdateDrinkArgs[] | false, alias?: string  } 
  | { name: 'updateManyDrinks', args?: MutationUpdateManyDrinksArgs[] | false, alias?: string  } 
  | { name: 'upsertDrink', args?: MutationUpsertDrinkArgs[] | false, alias?: string  } 
  | { name: 'deleteDrink', args?: MutationDeleteDrinkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDrinks', args?: MutationDeleteManyDrinksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createIngredient'
  | 'updateIngredient'
  | 'updateManyIngredients'
  | 'upsertIngredient'
  | 'deleteIngredient'
  | 'deleteManyIngredients'
  | 'createDrink'
  | 'updateDrink'
  | 'updateManyDrinks'
  | 'upsertDrink'
  | 'deleteDrink'
  | 'deleteManyDrinks'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateIngredientArgs =
  | 'data'
type MutationUpdateIngredientArgs =
  | 'data'
  | 'where'
type MutationUpdateManyIngredientsArgs =
  | 'data'
  | 'where'
type MutationUpsertIngredientArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteIngredientArgs =
  | 'where'
type MutationDeleteManyIngredientsArgs =
  | 'where'
type MutationCreateDrinkArgs =
  | 'data'
type MutationUpdateDrinkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDrinksArgs =
  | 'data'
  | 'where'
type MutationUpsertDrinkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDrinkArgs =
  | 'where'
type MutationDeleteManyDrinksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createIngredient: {
    type: 'Ingredient'
    args: Record<MutationCreateIngredientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IngredientCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient> | prisma.Ingredient
  }
  updateIngredient: {
    type: 'Ingredient'
    args: Record<MutationUpdateIngredientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IngredientUpdateInput, where: IngredientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient | null> | prisma.Ingredient | null
  }
  updateManyIngredients: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyIngredientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IngredientUpdateManyMutationInput, where?: IngredientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertIngredient: {
    type: 'Ingredient'
    args: Record<MutationUpsertIngredientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: IngredientWhereUniqueInput, create: IngredientCreateInput, update: IngredientUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient> | prisma.Ingredient
  }
  deleteIngredient: {
    type: 'Ingredient'
    args: Record<MutationDeleteIngredientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: IngredientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient | null> | prisma.Ingredient | null
  }
  deleteManyIngredients: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyIngredientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: IngredientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDrink: {
    type: 'Drink'
    args: Record<MutationCreateDrinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DrinkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink> | prisma.Drink
  }
  updateDrink: {
    type: 'Drink'
    args: Record<MutationUpdateDrinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DrinkUpdateInput, where: DrinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink | null> | prisma.Drink | null
  }
  updateManyDrinks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDrinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DrinkUpdateManyMutationInput, where?: DrinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDrink: {
    type: 'Drink'
    args: Record<MutationUpsertDrinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DrinkWhereUniqueInput, create: DrinkCreateInput, update: DrinkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink> | prisma.Drink
  }
  deleteDrink: {
    type: 'Drink'
    args: Record<MutationDeleteDrinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DrinkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink | null> | prisma.Drink | null
  }
  deleteManyDrinks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDrinksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DrinkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'ingredient', args?: SubscriptionIngredientArgs[] | false, alias?: string  } 
  | { name: 'drink', args?: SubscriptionDrinkArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'ingredient'
  | 'drink'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionIngredientArgs =
  | 'where'
type SubscriptionDrinkArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  ingredient: {
    type: 'IngredientSubscriptionPayload'
    args: Record<SubscriptionIngredientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: IngredientSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IngredientSubscriptionPayload | null> | prisma.IngredientSubscriptionPayload | null
  }
  drink: {
    type: 'DrinkSubscriptionPayload'
    args: Record<SubscriptionDrinkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DrinkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DrinkSubscriptionPayload | null> | prisma.DrinkSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'name'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for IngredientSubscriptionPayload

type IngredientSubscriptionPayloadObject =
  | IngredientSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type IngredientSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface IngredientSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IngredientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Ingredient'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IngredientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Ingredient | null> | prisma.Ingredient | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'IngredientPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IngredientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IngredientPreviousValues | null> | prisma.IngredientPreviousValues | null
  }
}
  

// Types for IngredientPreviousValues

type IngredientPreviousValuesObject =
  | IngredientPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'alcoholic', args?: [] | false, alias?: string  } 

type IngredientPreviousValuesFields =
  | 'id'
  | 'name'
  | 'alcoholic'



  

export interface IngredientPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  alcoholic: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DrinkSubscriptionPayload

type DrinkSubscriptionPayloadObject =
  | DrinkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DrinkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DrinkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DrinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Drink'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DrinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Drink | null> | prisma.Drink | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DrinkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DrinkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DrinkPreviousValues | null> | prisma.DrinkPreviousValues | null
  }
}
  

// Types for DrinkPreviousValues

type DrinkPreviousValuesObject =
  | DrinkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type DrinkPreviousValuesFields =
  | 'id'
  | 'published'
  | 'name'



  

export interface DrinkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface DrinkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  ingredients_every?: IngredientWhereInput | null
  ingredients_some?: IngredientWhereInput | null
  ingredients_none?: IngredientWhereInput | null
  favorited_by_every?: UserWhereInput | null
  favorited_by_some?: UserWhereInput | null
  favorited_by_none?: UserWhereInput | null
  creator?: UserWhereInput | null
  AND?: DrinkWhereInput[]
  OR?: DrinkWhereInput[]
  NOT?: DrinkWhereInput[]
}
export type DrinkWhereInputInputObject =
  | Extract<keyof DrinkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'ingredients_every', alias?: string  } 
  | { name: 'ingredients_some', alias?: string  } 
  | { name: 'ingredients_none', alias?: string  } 
  | { name: 'favorited_by_every', alias?: string  } 
  | { name: 'favorited_by_some', alias?: string  } 
  | { name: 'favorited_by_none', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IngredientWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  alcoholic?: boolean | null
  alcoholic_not?: boolean | null
  drinks_every?: DrinkWhereInput | null
  drinks_some?: DrinkWhereInput | null
  drinks_none?: DrinkWhereInput | null
  AND?: IngredientWhereInput[]
  OR?: IngredientWhereInput[]
  NOT?: IngredientWhereInput[]
}
export type IngredientWhereInputInputObject =
  | Extract<keyof IngredientWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  | { name: 'alcoholic_not', alias?: string  } 
  | { name: 'drinks_every', alias?: string  } 
  | { name: 'drinks_some', alias?: string  } 
  | { name: 'drinks_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  favorites_every?: DrinkWhereInput | null
  favorites_some?: DrinkWhereInput | null
  favorites_none?: DrinkWhereInput | null
  creations_every?: DrinkWhereInput | null
  creations_some?: DrinkWhereInput | null
  creations_none?: DrinkWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'favorites_every', alias?: string  } 
  | { name: 'favorites_some', alias?: string  } 
  | { name: 'favorites_none', alias?: string  } 
  | { name: 'creations_every', alias?: string  } 
  | { name: 'creations_some', alias?: string  } 
  | { name: 'creations_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IngredientWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type IngredientWhereUniqueInputInputObject =
  | Extract<keyof IngredientWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface DrinkWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type DrinkWhereUniqueInputInputObject =
  | Extract<keyof DrinkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string | null
  name?: string
  favorites?: DrinkCreateManyWithoutFavorited_byInput | null
  creations?: DrinkCreateManyWithoutCreatorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'favorites', alias?: string  } 
  | { name: 'creations', alias?: string  } 
  
export interface DrinkCreateManyWithoutFavorited_byInput {
  create?: DrinkCreateWithoutFavorited_byInput[]
  connect?: DrinkWhereUniqueInput[]
}
export type DrinkCreateManyWithoutFavorited_byInputInputObject =
  | Extract<keyof DrinkCreateManyWithoutFavorited_byInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DrinkCreateWithoutFavorited_byInput {
  id?: string | null
  published?: boolean | null
  name?: string
  ingredients?: IngredientCreateManyWithoutDrinksInput | null
  creator?: UserCreateOneWithoutCreationsInput
}
export type DrinkCreateWithoutFavorited_byInputInputObject =
  | Extract<keyof DrinkCreateWithoutFavorited_byInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'ingredients', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface IngredientCreateManyWithoutDrinksInput {
  create?: IngredientCreateWithoutDrinksInput[]
  connect?: IngredientWhereUniqueInput[]
}
export type IngredientCreateManyWithoutDrinksInputInputObject =
  | Extract<keyof IngredientCreateManyWithoutDrinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface IngredientCreateWithoutDrinksInput {
  id?: string | null
  name?: string
  alcoholic?: boolean | null
}
export type IngredientCreateWithoutDrinksInputInputObject =
  | Extract<keyof IngredientCreateWithoutDrinksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  
export interface UserCreateOneWithoutCreationsInput {
  create?: UserCreateWithoutCreationsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCreationsInputInputObject =
  | Extract<keyof UserCreateOneWithoutCreationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCreationsInput {
  id?: string | null
  email?: string | null
  name?: string
  favorites?: DrinkCreateManyWithoutFavorited_byInput | null
}
export type UserCreateWithoutCreationsInputInputObject =
  | Extract<keyof UserCreateWithoutCreationsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'favorites', alias?: string  } 
  
export interface DrinkCreateManyWithoutCreatorInput {
  create?: DrinkCreateWithoutCreatorInput[]
  connect?: DrinkWhereUniqueInput[]
}
export type DrinkCreateManyWithoutCreatorInputInputObject =
  | Extract<keyof DrinkCreateManyWithoutCreatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DrinkCreateWithoutCreatorInput {
  id?: string | null
  published?: boolean | null
  name?: string
  ingredients?: IngredientCreateManyWithoutDrinksInput | null
  favorited_by?: UserCreateManyWithoutFavoritesInput | null
}
export type DrinkCreateWithoutCreatorInputInputObject =
  | Extract<keyof DrinkCreateWithoutCreatorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'ingredients', alias?: string  } 
  | { name: 'favorited_by', alias?: string  } 
  
export interface UserCreateManyWithoutFavoritesInput {
  create?: UserCreateWithoutFavoritesInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutFavoritesInputInputObject =
  | Extract<keyof UserCreateManyWithoutFavoritesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutFavoritesInput {
  id?: string | null
  email?: string | null
  name?: string
  creations?: DrinkCreateManyWithoutCreatorInput | null
}
export type UserCreateWithoutFavoritesInputInputObject =
  | Extract<keyof UserCreateWithoutFavoritesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'creations', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  name?: string | null
  favorites?: DrinkUpdateManyWithoutFavorited_byInput | null
  creations?: DrinkUpdateManyWithoutCreatorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'favorites', alias?: string  } 
  | { name: 'creations', alias?: string  } 
  
export interface DrinkUpdateManyWithoutFavorited_byInput {
  create?: DrinkCreateWithoutFavorited_byInput[]
  delete?: DrinkWhereUniqueInput[]
  connect?: DrinkWhereUniqueInput[]
  set?: DrinkWhereUniqueInput[]
  disconnect?: DrinkWhereUniqueInput[]
  update?: DrinkUpdateWithWhereUniqueWithoutFavorited_byInput[]
  upsert?: DrinkUpsertWithWhereUniqueWithoutFavorited_byInput[]
  deleteMany?: DrinkScalarWhereInput[]
  updateMany?: DrinkUpdateManyWithWhereNestedInput[]
}
export type DrinkUpdateManyWithoutFavorited_byInputInputObject =
  | Extract<keyof DrinkUpdateManyWithoutFavorited_byInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DrinkUpdateWithWhereUniqueWithoutFavorited_byInput {
  where?: DrinkWhereUniqueInput
  data?: DrinkUpdateWithoutFavorited_byDataInput
}
export type DrinkUpdateWithWhereUniqueWithoutFavorited_byInputInputObject =
  | Extract<keyof DrinkUpdateWithWhereUniqueWithoutFavorited_byInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DrinkUpdateWithoutFavorited_byDataInput {
  published?: boolean | null
  name?: string | null
  ingredients?: IngredientUpdateManyWithoutDrinksInput | null
  creator?: UserUpdateOneRequiredWithoutCreationsInput | null
}
export type DrinkUpdateWithoutFavorited_byDataInputInputObject =
  | Extract<keyof DrinkUpdateWithoutFavorited_byDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'ingredients', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface IngredientUpdateManyWithoutDrinksInput {
  create?: IngredientCreateWithoutDrinksInput[]
  delete?: IngredientWhereUniqueInput[]
  connect?: IngredientWhereUniqueInput[]
  set?: IngredientWhereUniqueInput[]
  disconnect?: IngredientWhereUniqueInput[]
  update?: IngredientUpdateWithWhereUniqueWithoutDrinksInput[]
  upsert?: IngredientUpsertWithWhereUniqueWithoutDrinksInput[]
  deleteMany?: IngredientScalarWhereInput[]
  updateMany?: IngredientUpdateManyWithWhereNestedInput[]
}
export type IngredientUpdateManyWithoutDrinksInputInputObject =
  | Extract<keyof IngredientUpdateManyWithoutDrinksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface IngredientUpdateWithWhereUniqueWithoutDrinksInput {
  where?: IngredientWhereUniqueInput
  data?: IngredientUpdateWithoutDrinksDataInput
}
export type IngredientUpdateWithWhereUniqueWithoutDrinksInputInputObject =
  | Extract<keyof IngredientUpdateWithWhereUniqueWithoutDrinksInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface IngredientUpdateWithoutDrinksDataInput {
  name?: string | null
  alcoholic?: boolean | null
}
export type IngredientUpdateWithoutDrinksDataInputInputObject =
  | Extract<keyof IngredientUpdateWithoutDrinksDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  
export interface IngredientUpsertWithWhereUniqueWithoutDrinksInput {
  where?: IngredientWhereUniqueInput
  update?: IngredientUpdateWithoutDrinksDataInput
  create?: IngredientCreateWithoutDrinksInput
}
export type IngredientUpsertWithWhereUniqueWithoutDrinksInputInputObject =
  | Extract<keyof IngredientUpsertWithWhereUniqueWithoutDrinksInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface IngredientScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  alcoholic?: boolean | null
  alcoholic_not?: boolean | null
  AND?: IngredientScalarWhereInput[]
  OR?: IngredientScalarWhereInput[]
  NOT?: IngredientScalarWhereInput[]
}
export type IngredientScalarWhereInputInputObject =
  | Extract<keyof IngredientScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  | { name: 'alcoholic_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IngredientUpdateManyWithWhereNestedInput {
  where?: IngredientScalarWhereInput
  data?: IngredientUpdateManyDataInput
}
export type IngredientUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof IngredientUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface IngredientUpdateManyDataInput {
  name?: string | null
  alcoholic?: boolean | null
}
export type IngredientUpdateManyDataInputInputObject =
  | Extract<keyof IngredientUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutCreationsInput {
  create?: UserCreateWithoutCreationsInput | null
  update?: UserUpdateWithoutCreationsDataInput | null
  upsert?: UserUpsertWithoutCreationsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutCreationsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutCreationsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCreationsDataInput {
  email?: string | null
  name?: string | null
  favorites?: DrinkUpdateManyWithoutFavorited_byInput | null
}
export type UserUpdateWithoutCreationsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCreationsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'favorites', alias?: string  } 
  
export interface UserUpsertWithoutCreationsInput {
  update?: UserUpdateWithoutCreationsDataInput
  create?: UserCreateWithoutCreationsInput
}
export type UserUpsertWithoutCreationsInputInputObject =
  | Extract<keyof UserUpsertWithoutCreationsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DrinkUpsertWithWhereUniqueWithoutFavorited_byInput {
  where?: DrinkWhereUniqueInput
  update?: DrinkUpdateWithoutFavorited_byDataInput
  create?: DrinkCreateWithoutFavorited_byInput
}
export type DrinkUpsertWithWhereUniqueWithoutFavorited_byInputInputObject =
  | Extract<keyof DrinkUpsertWithWhereUniqueWithoutFavorited_byInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DrinkScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: DrinkScalarWhereInput[]
  OR?: DrinkScalarWhereInput[]
  NOT?: DrinkScalarWhereInput[]
}
export type DrinkScalarWhereInputInputObject =
  | Extract<keyof DrinkScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DrinkUpdateManyWithWhereNestedInput {
  where?: DrinkScalarWhereInput
  data?: DrinkUpdateManyDataInput
}
export type DrinkUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DrinkUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DrinkUpdateManyDataInput {
  published?: boolean | null
  name?: string | null
}
export type DrinkUpdateManyDataInputInputObject =
  | Extract<keyof DrinkUpdateManyDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface DrinkUpdateManyWithoutCreatorInput {
  create?: DrinkCreateWithoutCreatorInput[]
  delete?: DrinkWhereUniqueInput[]
  connect?: DrinkWhereUniqueInput[]
  set?: DrinkWhereUniqueInput[]
  disconnect?: DrinkWhereUniqueInput[]
  update?: DrinkUpdateWithWhereUniqueWithoutCreatorInput[]
  upsert?: DrinkUpsertWithWhereUniqueWithoutCreatorInput[]
  deleteMany?: DrinkScalarWhereInput[]
  updateMany?: DrinkUpdateManyWithWhereNestedInput[]
}
export type DrinkUpdateManyWithoutCreatorInputInputObject =
  | Extract<keyof DrinkUpdateManyWithoutCreatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DrinkUpdateWithWhereUniqueWithoutCreatorInput {
  where?: DrinkWhereUniqueInput
  data?: DrinkUpdateWithoutCreatorDataInput
}
export type DrinkUpdateWithWhereUniqueWithoutCreatorInputInputObject =
  | Extract<keyof DrinkUpdateWithWhereUniqueWithoutCreatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DrinkUpdateWithoutCreatorDataInput {
  published?: boolean | null
  name?: string | null
  ingredients?: IngredientUpdateManyWithoutDrinksInput | null
  favorited_by?: UserUpdateManyWithoutFavoritesInput | null
}
export type DrinkUpdateWithoutCreatorDataInputInputObject =
  | Extract<keyof DrinkUpdateWithoutCreatorDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'ingredients', alias?: string  } 
  | { name: 'favorited_by', alias?: string  } 
  
export interface UserUpdateManyWithoutFavoritesInput {
  create?: UserCreateWithoutFavoritesInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutFavoritesInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutFavoritesInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutFavoritesInputInputObject =
  | Extract<keyof UserUpdateManyWithoutFavoritesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutFavoritesInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutFavoritesDataInput
}
export type UserUpdateWithWhereUniqueWithoutFavoritesInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutFavoritesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutFavoritesDataInput {
  email?: string | null
  name?: string | null
  creations?: DrinkUpdateManyWithoutCreatorInput | null
}
export type UserUpdateWithoutFavoritesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutFavoritesDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'creations', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutFavoritesInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutFavoritesDataInput
  create?: UserCreateWithoutFavoritesInput
}
export type UserUpsertWithWhereUniqueWithoutFavoritesInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutFavoritesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface DrinkUpsertWithWhereUniqueWithoutCreatorInput {
  where?: DrinkWhereUniqueInput
  update?: DrinkUpdateWithoutCreatorDataInput
  create?: DrinkCreateWithoutCreatorInput
}
export type DrinkUpsertWithWhereUniqueWithoutCreatorInputInputObject =
  | Extract<keyof DrinkUpsertWithWhereUniqueWithoutCreatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  name?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface IngredientCreateInput {
  id?: string | null
  name?: string
  alcoholic?: boolean | null
  drinks?: DrinkCreateManyWithoutIngredientsInput | null
}
export type IngredientCreateInputInputObject =
  | Extract<keyof IngredientCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  | { name: 'drinks', alias?: string  } 
  
export interface DrinkCreateManyWithoutIngredientsInput {
  create?: DrinkCreateWithoutIngredientsInput[]
  connect?: DrinkWhereUniqueInput[]
}
export type DrinkCreateManyWithoutIngredientsInputInputObject =
  | Extract<keyof DrinkCreateManyWithoutIngredientsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DrinkCreateWithoutIngredientsInput {
  id?: string | null
  published?: boolean | null
  name?: string
  favorited_by?: UserCreateManyWithoutFavoritesInput | null
  creator?: UserCreateOneWithoutCreationsInput
}
export type DrinkCreateWithoutIngredientsInputInputObject =
  | Extract<keyof DrinkCreateWithoutIngredientsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'favorited_by', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface IngredientUpdateInput {
  name?: string | null
  alcoholic?: boolean | null
  drinks?: DrinkUpdateManyWithoutIngredientsInput | null
}
export type IngredientUpdateInputInputObject =
  | Extract<keyof IngredientUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  | { name: 'drinks', alias?: string  } 
  
export interface DrinkUpdateManyWithoutIngredientsInput {
  create?: DrinkCreateWithoutIngredientsInput[]
  delete?: DrinkWhereUniqueInput[]
  connect?: DrinkWhereUniqueInput[]
  set?: DrinkWhereUniqueInput[]
  disconnect?: DrinkWhereUniqueInput[]
  update?: DrinkUpdateWithWhereUniqueWithoutIngredientsInput[]
  upsert?: DrinkUpsertWithWhereUniqueWithoutIngredientsInput[]
  deleteMany?: DrinkScalarWhereInput[]
  updateMany?: DrinkUpdateManyWithWhereNestedInput[]
}
export type DrinkUpdateManyWithoutIngredientsInputInputObject =
  | Extract<keyof DrinkUpdateManyWithoutIngredientsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DrinkUpdateWithWhereUniqueWithoutIngredientsInput {
  where?: DrinkWhereUniqueInput
  data?: DrinkUpdateWithoutIngredientsDataInput
}
export type DrinkUpdateWithWhereUniqueWithoutIngredientsInputInputObject =
  | Extract<keyof DrinkUpdateWithWhereUniqueWithoutIngredientsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DrinkUpdateWithoutIngredientsDataInput {
  published?: boolean | null
  name?: string | null
  favorited_by?: UserUpdateManyWithoutFavoritesInput | null
  creator?: UserUpdateOneRequiredWithoutCreationsInput | null
}
export type DrinkUpdateWithoutIngredientsDataInputInputObject =
  | Extract<keyof DrinkUpdateWithoutIngredientsDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'favorited_by', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface DrinkUpsertWithWhereUniqueWithoutIngredientsInput {
  where?: DrinkWhereUniqueInput
  update?: DrinkUpdateWithoutIngredientsDataInput
  create?: DrinkCreateWithoutIngredientsInput
}
export type DrinkUpsertWithWhereUniqueWithoutIngredientsInputInputObject =
  | Extract<keyof DrinkUpsertWithWhereUniqueWithoutIngredientsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface IngredientUpdateManyMutationInput {
  name?: string | null
  alcoholic?: boolean | null
}
export type IngredientUpdateManyMutationInputInputObject =
  | Extract<keyof IngredientUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'alcoholic', alias?: string  } 
  
export interface DrinkCreateInput {
  id?: string | null
  published?: boolean | null
  name?: string
  ingredients?: IngredientCreateManyWithoutDrinksInput | null
  favorited_by?: UserCreateManyWithoutFavoritesInput | null
  creator?: UserCreateOneWithoutCreationsInput
}
export type DrinkCreateInputInputObject =
  | Extract<keyof DrinkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'ingredients', alias?: string  } 
  | { name: 'favorited_by', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface DrinkUpdateInput {
  published?: boolean | null
  name?: string | null
  ingredients?: IngredientUpdateManyWithoutDrinksInput | null
  favorited_by?: UserUpdateManyWithoutFavoritesInput | null
  creator?: UserUpdateOneRequiredWithoutCreationsInput | null
}
export type DrinkUpdateInputInputObject =
  | Extract<keyof DrinkUpdateInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'ingredients', alias?: string  } 
  | { name: 'favorited_by', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface DrinkUpdateManyMutationInput {
  published?: boolean | null
  name?: string | null
}
export type DrinkUpdateManyMutationInputInputObject =
  | Extract<keyof DrinkUpdateManyMutationInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IngredientSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: IngredientWhereInput | null
  AND?: IngredientSubscriptionWhereInput[]
  OR?: IngredientSubscriptionWhereInput[]
  NOT?: IngredientSubscriptionWhereInput[]
}
export type IngredientSubscriptionWhereInputInputObject =
  | Extract<keyof IngredientSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DrinkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DrinkWhereInput | null
  AND?: DrinkSubscriptionWhereInput[]
  OR?: DrinkSubscriptionWhereInput[]
  NOT?: DrinkSubscriptionWhereInput[]
}
export type DrinkSubscriptionWhereInputInputObject =
  | Extract<keyof DrinkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type DrinkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type IngredientOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'alcoholic_ASC'
  | 'alcoholic_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  